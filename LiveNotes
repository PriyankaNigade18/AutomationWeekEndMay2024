
Selenium WebDriver
========================
Selenium WebDriver is an API for WebUI automation testing

=================
Setup for Java Project
=========================
1.create new java project
2.download selenium jar (selenium.dev)
3.Right click on Project--->Build path--->Configure build path-->libraries
--->class path--->Add external library

SetUp for Maven Project
==========================
Maven is Project management tool
Maven is Build management tool

1.pom.xml
============
This is configuration file for a project
POM stand for Project Object Model
It include Project structure

<project>

<dependencies>

<dependency> Selenium </dependency>

</dependencies>


<build>
<plugin> surefireplugin </plugin>
</build>


</project>
======================================
What is dependency
====================
It is an executable file(library)


Repositories of Maven
============================
1.Local
=============
/users/.m2 folder

2.Remote/Central
=======================
mvnrepository.com

===============================================
26-05-2024
============
Interview Question
====================
1.How to open empty browser
WebDriver driver=new ChromeDriver();

Selenium WebDriver
=====================
Selenium Exceptions
=========================
1.For Wrong url :InvalidArgumentException: invalid argument
2.InvalidSelectorException: Compound class names not permitted

Manual Testing test case
-----------------------------
Test Case:Test title of Google applicationIt should be Google
==================================================================
Step1: Open Browser with google Application
step2: Get the current title of application
Step3: Compare title with expected title
Step4: As per comparison print the result
Step5: close the browser

WebDriver Commands
======================
1.Browser commands
=======================
1.get(url)
2.getTitle()
3.getCurrentUrl()
4.getPageSource()
5.close()
6.quit()


2.Navigation commands for Browser
========================================
Selenium has Navigation interface available 

1.to(url):Navigate to ne app
------------------
driver.navigate().to(url)

2.back()
-------------------
driver.navigate().back()

3.forward()
--------------------
driver.navigate().forward()

4.refresh()
-----------------------
driver.navigate().refresh()

=============================================================
Synchronization is Selenium?
==================================
-Time mapping between tool and application is called Synchronization
-As tool always run faster and application may need extra time to load element so 
time issues get occured!

Selenium has Waits
-======================
1.Static wait
====================
Thread.sleep(2000)
Its a java concept
Its a hard coded wait

Default time out for selenium is 500ms means 0.5 seconds


2.Dynamic Wait
======================
1.Implicit wait
==================
- Implicit wait is a global wait
- applicable to all elements to script 
- If elements needs 5sec timeout and Implicit wait is applied 10sec then
selenium will not wait for remaining 5sec. it will continue with next element
syntax:
===============
driver.manage().timeouts().implicitilyWait(Duration.ofSeconds(10));

=============
2.Explicit Wait
==================
- It is not global 
-applicable saperately to every seperate element
- it wait as per condition for that element

In selenium Wait interface available
===========
1.WebDriverWait class
2.FluentWait class

WebDriverWait(c) extends FluentWait(c) implements Wait(I)
============================================================
=================================================
1-06-2024
================

What is WebElement?
========================
All GUI element are called WebElement.
technically WebElement is interface in selenium

1.Identify WebElement
2.Perform action on that webElement

How selenium identify WebElement
==================================
Selenium identify WebElement using locators?

Locator is address of WebElement from that webpage

Selenium support total 8 loctaors
================================
1.By id
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.By tagName

Dynamic Locators
====================
7.By cssSelector
8.By xpath

====================================
1.To identify Element
============================
1.findElement()
======================
-findElement identify one single element
-return type of this method is WebElement object
- If Element not found it throws NoSuchElementException.


2.findElements()
====================
-findElements() identify multiple webelements
-return type is List<WebElement> 
-If element not found then findElements()never throws any exception

=========================
2.Perform action
=====================
textbox,searchbox---- write---->sendKeys("",Keys class)
clear the text----->clear()
button,link,checkbox,radio button----click------>click()

WebElement Methods
========================
getText()
===============
Any visible text you can capture
html inner text also you can find

getAttribute(attribute name)
===================================
returns value of attribute
validation
============
isDisplayed()
isEnabled()
isSelected()

===========================================
className Locator
=========================
InvalidSelectorException: Compound class names not permitted
Selenium not work with  mutiple class names

class="submit-button btn_action"
			class1      class2

open finder: clrt+f
check for the unique class name 
and add it into locator

====================================================
Link automtaion in Selenium
===================================
1.linkText (full text)
----------------
It perform exact matching 

2.partialLinklText (partial text)
----------------------
It perform partial matching

<a href="url" name=''> visible text</a>

<a id="SignIn" href="login.html"> Sign In </a>

									text
									
===============================================
tagname
============
multiple weblements we have same tag name

number of textboxes <input>
number of images  <img>
number of links  <a>

Live task:
===================
1.calculate number of links from naukri page and get the attribute value and text
https://www.naukri.com/

===============================
Dynamic Locators
===============
1.By cssSelector

2.Xpath

cssSelector
================
what is css?
--------------
Cascaded style sheet is a language which used to provides styles to the webelement

what is cssSelector?
=================
It is a locator used in selenium to interact with webelement by directly using
id,classname or any attribute
cssSelector syntax is simple
cssSelector is faster than xpath as it travels in one direction
(parent------>child)
cssSelector is dynamic but with limited method support
cssSelector not support any axies
using csssElector text you can't capture
CssSelector not support indexing

syntax:
===========
1.tagname with id-#
=======================
syntax:
===========
tagname#id
input#input-email


2.tagname with classname
=========================
class="btn btn-primary"   2 class names

Syntax:
================
tagname.classname

input.btn.btn-primary



3.tagname with attribute
========================
Syntax
===============
tagname[attribute='value']

input[type='password']

4.tagname with id,class,attribute
=====================================
Synatx:
=============
tagname#id.className[attribute='value']

input.btn.btn-primary[value='Login']

=====================
* contains- partial value
========================
Syntax
============
tagname[attribute *='value']

input[placeholder *='E-Mail Address']

input[placeholder *='Address']
input[placeholder *='E-Mail']
-----------------------------------------
$- ends with
================
Syntax:
==============
tagname[attribute $='suffix value']

input[value$='Login']
-----------------------------------------

^ - starts with
======================
Syntax
========
tagname[attribute ^='prefixvalue']

input[placeholder^='Pas']

======================================

Assignments
=================
1.Automate Orangehrm login and logout application using csselector

2.Automate Crm application login and logout using cssSelector

==============================================================
2-06-2024
==============
8. By xpath
================
What is xpath?
====================
xpath is path of the element from xml and html document
Xpath identify element directly from DOM(document object Model)
Xpath can travel in forward and backward
Xpath support multiple methods
xpath support index and poistion()
Xpath support axies


=============html Dom==================
<html>--------root element
<head>
</head>
<body>

<input type="text">--------element
<a href="">link1</a>
 
</body>


</html>

=======================================================
Xpath Types
===============
1.Absolute xpath (full xpath)
=======================
- It starts with root element
- It starts with /

/html/body/nav/input

2.Relative xpath (partail xpath)
======================================-
- relative xpath identify element by its relative property
- It starts with //

//*[@id="email-id"]
======================================================
Syntax:
===========
//tagname[@attribute='value']
email
======
name="email"

//input[@name='email']

===========================================================
xpath with operators
========================
1. and
==============
syntax:
==========
//tagname[@attribute='value' and @attribute='value']
2. or
=================
syntax:
==========
//tagname[@attribute='value' or @attribute='value']

xpath with indexing and position() last()
===========================================
indexing
===============
Syntax:
============
(xpath)[index_number]

position()
============
(xpath)[position()=index]

last()
above()
below()

============================
xpath methods
================
text()
=========
syntax:
============
//tagname[text()='text']

//a[text()='Best Sellers']

normalize-space()
======================
ignore white space before and after the text

//tagname[normalize-space()='text']


contains()
===========
syntax:
===========
//tagname[contains(@attribute,value)]

or
//tagname[contains(text(),'text')]

//input[contains(@id,'two')]

startsWith(prefix)
======================
//tagname[starts-with(@attribute,value)]

or
//tagname[starts-with(text(),'text')]

//input[starts-with(@id,'two')]
xpath Axies
==============
<table id="customers" class="table">-----ancestor
  
      <tbody>-----parent for all rows(ancestor for mark)

        <tr>-----parent

          <td>1</td>-------preceding sibling fore mark

          <td>Mark</td>-----child element

          <td>Tompson</td>---following sibling

          <td>the_mark7</td>
 
         <td>
              <a href="user.html"><i class="icon-pencil"></i></a>
              <a role="button" href="#myModal" data-toggle="modal"><i class="icon-remove"></i></a>
          </td>

        </tr>

      </tbody>
    </table>

Ancestor
==============
Syntax:
=========
//tagname[@attribute='value']//ancestor::tagname of ancestor

identify ancestor for Mark
=============================
//td[text()='Mark']//ancestor::tbody

parent
===============
Syntax:
=========
//tagname[@attribute='value']//parent::tagname of parent
identify parent for Mark
=============================
//td[text()='Mark']//parent::tr

child
=====================
Syntax:
=========
//tagname[@attribute='value']//child::tagname of child

all child of first row
==========================
(//tbody//tr)[1]//child::td


following
=================
Syntax:
=========
//tagname[@attribute='value']//following::tagname of follwing element

All rows after Mark
=======================
//td[text()='Mark']//following::tr ------5 rows


preceding
==============
Syntax:
=========
//tagname[@attribute='value']//preceding::tagname of preceding element

All rows before Mark
==========================
//td[text()='Mark']//preceding::tr    1 row match(heading)

following-sibling
=======================
Syntax:
=========
//tagname[@attribute='value']//following-sibling::tagname of sibling

All following sibling of Mark
======================================

//td[text()='Mark']//following-sibling::td

preceding-sibling
======================
Syntax:
=========
//tagname[@attribute='value']//preceding-sibling::tagname of precedingsibling

Preceding sibling of Mark
===========================
//td[text()='Mark']//preceding-sibling::td   1 match id

========================================================
8-06-2024
=============
Dropdown Element
====================
1.Select tag based
========================

Select class 

Single option selection
--------------------
1.SelectById()
2.SelectByValue("")
3.selectByVisibleText("")

To test dropdown support multiple selection
------------------------------------
isMultiple()

To get all the options 
----------------------------
getOptions()


2.Bootstrap 
===================

Inspect+ Locators (xpath)

======================================
Capabilities are options that you can use to customize and configure a browser session

https://developer.chrome.com/docs/chromedriver/capabilities
To customize browser session we have classes in selenium as per browsr
chrome--->ChromeOptions class
firefox--->FirefoxOptions class
edge---->EdgeOptions class


https://peter.sh/experiments/chromium-command-line-switches/
disable Notifications:
=========================
--disable-notifications

===========================================
calendar
================
testing done

Window Handling
======================
Multiple windows
====================
1.getWindowHandle() returns String, parentid
2.getWindowHandles() return set<String> parentid+childid
3.to switch
SwitchTo()

new Feature
================
newWindow()
---------------
Return type of newWindow() is WebDriver interface object

To open new Tab/Window
WebDriver driver=driver.switchTo().newWindow(WindowType.TAB);
===================================================================
Capabilities
=====================
helps to customized browser session
chrome--->ChromeOptions
firefox--->FirefoxOptions
edge---->EdgeOptions



Alert Handling
====================
Alert is inteface in selenium

Ok--->accept()
cancel---->dismiss()
to get the text of alert--->getText()
prompt alert--->sendKeys()

switchTo(): target
==================================================
Frame Handling
===================
Html document inside another html document is called frame

tags
==========
<frame>
<iframe>

rule
===========
1.using index
----------------
driver.switchTo().frame(index)

2.using id/name
----------------
driver.switchTo().frame(id/name)

3.using WebElement
----------------
declare that frame element as webelement
driver.switchTo().frame(frame-element)

//Top
--------------
driver.switchTo().defaultContent()

//main frame
---------------
driver.switchTo().parentFrame()

==================================================
Mouse operations- Actions class
================================
Actions is a class


completed
========================
15-06-2024
====================
JavascriptExecutor interface
==============================

File Upload/File Download
================================
File Upload
=============
https://the-internet.herokuapp.com/upload

File Download
================
https://demo.automationtesting.in/FileDownload.html
Using ChromePreference
============================
chromepref.put("download.default_directory",Filepath);
options.setExperimentalOption("prefs",chromepref);
=====================================================
TestNG Framework
===================

1.install testng
2.add dependency
Arguments
=============
1.priority- sequencing
2.description
3.invocationCount= iteration
4.dependsOnMethod= To set dependency between test
5.enabled=false/true

Note
============
By default testng execute as per alphabetical order so sequencing is imporatant
using priority you can make test in sequence

By default reports are provided in testng
========================================
refresh project-->test-output
emailable.html
index.html
defaultsuite.html

How to disable/ignore any test from testng?
=========================================
1.using argument- enabled=false
2.Using exclude test from testng.xml file
<class name="testNgDemo.TestDemo_EnableArgument">
      <methods>
      <exclude name="addToCartTest"></exclude>
      </methods>
   </class>


note
=====
When you are adding xml file run test from xml as suite

How to run only fail testcase?
===============================
under test-output folder-->testng-failed.xml file

Grouping In TestNg
=================
Grouping helps to execute test as per there type

<groups>
<run>
<include name="Functional"></include>
</run>
</groups>

==========================
16-06-2024
==================

Test suite
===========
testng.xml file

Annotations
=================
done

=======================
Data Passing using xml
=========================
1.create test
2.create xml
3.set the parameter
4.use @Parameters in test
5.Run the test from xml

=======================
Parallel execution using xml
--------------------
< suite parallel=test>

method level
class level
test level






Hybrid FrameworkDesigndone

How to pass test data from xml

How to use Properties File

DataDriven Test
ScreenShots

Reporting
=============
ExtentReport- done

AllureReports

Cucumber Framework
=====================

PageObjectModel

Devops Basics

API Testing
===============


Appium
============


SQL
==========


6 th or 7th July


























































									
									






=================HTML DOM========================
<html>
<head>
</head>

<body>

<input type='text' id='aa' name='a'>

tagname:   input
attribute = type, name ,id
values=     text, a    , aa


</body>



</html>






































































































